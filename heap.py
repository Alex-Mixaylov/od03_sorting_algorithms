# Применение: Пирамидальная сортировка полезна, когда требуется отсортировать данные в ограниченном
# объеме памяти или при необходимости извлекать максимальные или минимальные элементы из структуры данных.
# Heap Sort удобен при работе с приоритетными очередями или поиске максимальных/минимальных элементов.

# Пример задачи Heap Sort: Сортировка списка чисел и нахождение k-го по величине элемента.

import heapq

def heap_sort(arr):
    heapq.heapify(arr) # Преобразование списка в объект heap
    sorted_arr = []
    while arr:
        sorted_arr.append(heapq.heappop(arr)) # Удаляет и возвращает наименьший элемент из heap, при этом структура сохраняется.
    return sorted_arr

def find_kth_largest(arr, k):
    return heapq.nlargest(k, arr)[-1] # Возвращают K наибольших элементов из итерируемого объекта

# Пример использования
arr = [3, 2, 1, 5, 6, 4]
k = 2
sorted_arr = heap_sort(arr[:])  # создаем копию списка для сортировки
print("Отсортированный массив:", sorted_arr)
kth_largest = find_kth_largest(arr, k)
print(f"{k}-й по величине элемент:", kth_largest)
# Результат
# Отсортированный массив: [1, 2, 3, 4, 5, 6]
# 2-й по величине элемент: 5